#!/bin/sh
set -eu

SCRIPT_NAME=vpn-runner

# Define logging wrapper functions.
log() { logger -t "$SCRIPT_NAME" -p daemon.notice "$*"; }
log_err() { logger -t "$SCRIPT_NAME" -p daemon.err "$*"; }

# Delay startup to ensure network is settled.
sleep 10

# Ensure the script is run as root.
if [ "$(id -u)" -ne 0 ]; then
    log_err "Error: This script must be run as root. Exiting."
    exit 1
fi

# Load environment variables from /usr/local/etc/.gateway-env.conf config file.
. /usr/local/etc/.gateway-env.conf

# Configuration: timeouts, intervals, and retry settings.
OVPN_PROXY_PORT=$(tail -n 1 "${OVPN_PROXY_AUTH:-}" 2>/dev/null || echo 0)
GATEWAY_TIMEOUT=30 # Total seconds to wait for default gateway(s).
INTERVAL=1         # Polling interval in seconds.

# Get current default gateway interface.
EXT_IF_CUR=$(netstat -rn -f inet 2>/dev/null | awk '$1 == "default" {print $4; exit}')

# Build a newline-separated list of candidates, filtering out the current default.
CANDIDATE_LINES=$(echo "$EXT_IF_LIST" | tr ',' '\n' | grep -Fvx "$EXT_IF_CUR")

# Loop until we have a valid candidate or remove all items from the list.
EXT_IF_NEW=""
EXT_IF_AVAILABLE=0
while [ -n "$CANDIDATE_LINES" ]; do
    # Pick a random index (1â€¦NUM_CANDIDATES).
    RAND=$(od -An -N2 -tu2 /dev/urandom | tr -d ' ')
    INDEX=$((RAND % $(echo "$CANDIDATE_LINES" | wc -l) + 1))

    # Grab exactly that line.
    EXT_IF_NEW=$(echo "$CANDIDATE_LINES" | sed -n "${INDEX}p")

    # Verify the specified interface exists.
    EXT_IF_AVAILABLE=$([ -n "$EXT_IF_NEW" ] && ifconfig "$EXT_IF_NEW" >/dev/null 2>&1 && echo 1 || echo 0)
    if [ "$EXT_IF_AVAILABLE" -eq 1 ]; then
        # Delete existing default routes for IPv4 and IPv6.
        route -n delete -inet default || true
        route -n delete -inet6 default || true

        # Bring the interface up.
        ifconfig "$EXT_IF_NEW" up

        # Restart the DHCP client service on the interface.
        service dhclient restart "$EXT_IF_NEW" || true

        # Break out of the loop now that the interface is up.
        break
    fi

    # Remove the selected line from the list.
    CANDIDATE_LINES=$(echo "$CANDIDATE_LINES" | sed "${INDEX}d")
done

# Poll for default gateways for IPv4 (using netstat).
SECONDS_WAITED=0
DEFAULT_GW_IPV4=""

if echo "$EXT_IF_NEW" | grep -q 'bce[0-2]'; then
    # Configure the default gateway according to the environment.
    DEFAULT_GW_IPV4="${EXT_GW_IPV4:-}"
    if [ -n "$DEFAULT_GW_IPV4" ]; then
        route -n add -inet default "$DEFAULT_GW_IPV4" || true
    fi
else
    while [ "$SECONDS_WAITED" -lt "$GATEWAY_TIMEOUT" ]; do
        # For IPv4, extract the default gateway from netstat.
        DEFAULT_GW_IPV4=$(netstat -rn -f inet 2>/dev/null | awk '$1 == "default" {print $2; exit}')
        if [ -n "$DEFAULT_GW_IPV4" ]; then
            break
        fi
        sleep "$INTERVAL"
        SECONDS_WAITED=$((SECONDS_WAITED + INTERVAL))
    done

    if [ -z "$DEFAULT_GW_IPV4" ]; then
        log_err "Error: Failed to discover a default gateway after $GATEWAY_TIMEOUT seconds."
        false
    fi

    if echo "$EXT_IF_NEW" | grep -q 'bce[3-9]'; then
        # Connect directly to the server.
        OVPN_PROXY_PORT=0
    fi
fi

# Update the OpenVPN configuration.
if [ "$EXT_IF_AVAILABLE" -eq 1 ] && [ -f "${OVPN_PROXY_AUTH:-}" ] &&
    [ -n "$DEFAULT_GW_IPV4" ] && [ "$OVPN_PROXY_PORT" -gt 0 ]; then
    sed -e "s|__AUTH_FILE__|$OVPN_AUTH|" \
        -e "s|__PROXY_STRING__|${DEFAULT_GW_IPV4} ${OVPN_PROXY_PORT}|" \
        -e "s|__PROXY_AUTH_FILE__|$OVPN_PROXY_AUTH|" \
        "$OVPN_TEMPLATE" >"$OVPN_FILE"
else
    sed -E -e "s|^proto [a-z]+$|proto udp|" \
        -e "s|__AUTH_FILE__|$OVPN_AUTH|" \
        -e "/__PROXY_STRING__/d" \
        -e "/__PROXY_AUTH_FILE__/d" \
        "$OVPN_TEMPLATE" >"$OVPN_FILE"
fi

# Start the OpenVPN service.
exec openvpn --syslog openvpn --config "$OVPN_FILE" --writepid /var/run/openvpn.pid
